Sure, let's solve the problem in Java.

The problem is to find the longest palindromic substring in a given string \( s \).

To solve this problem efficiently using the "Expand Around Center" technique, which has a time complexity of \( O(n^2) \) and a space complexity of \( O(1) \).

Here's the Java code for the solution:

```java
public class LongestPalindromicSubstring {
    
    public static String longestPalindrome(String s) {
        if (s == null || s.length() < 1) return "";
        
        int start = 0, end = 0;
        
        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i);
            int len2 = expandAroundCenter(s, i, i + 1);
            
            int len = Math.max(len1, len2);
            
            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        
        return s.substring(start, end + 1);
    }

    private static int expandAroundCenter(String s, int left, int right) {
        int L = left, R = right;
        
        while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
            L--;
            R++;
        }
        
        return R - L - 1;
    }
    
    public static void main(String[] args) {
        String s = "babad";
        System.out.println("Longest Palindromic Substring: " + longestPalindrome(s));
    }
}
```

### Explanation

1. **Main Function `longestPalindrome`**:
   - If the input string is null or its length is less than 1, return an empty string.
   - Initialize `start` and `end` to keep track of the start and end indices of the longest palindromic substring found so far.
   - Iterate through each character in the string, treating each character (and each pair of consecutive characters) as the center of a potential palindrome.
   - For each character or pair of characters, call `expandAroundCenter` to find the length of the longest palindrome centered at that point.
   - Update `start` and `end` if a longer palindrome is found.

2. **Helper Function `expandAroundCenter`**:
   - This function expands outwards from the center as long as the characters on the left and right are equal.
   - It returns the length of the palindrome found.

3. **Main**:
   - The `main` function is used to test the implementation with the input string "babad".

By expanding around each center (single character or pair of characters) and checking for palindromes, we ensure that the time complexity remains \( O(n^2) \) and the space complexity stays \( O(1) \). This approach efficiently finds the longest palindromic substring in the given string.